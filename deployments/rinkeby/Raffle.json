{
  "address": "0xa1A02D1311a94eC7c3e9930eD99b5d0e3120279B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gaseLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestRandomWinner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xad2fd8dc92405946afcbce20d731acef4ae87b52ec250c66194739024e07b3f0",
  "receipt": {
    "to": null,
    "from": "0xFfCdb8f3596f53f8Aa907D5294fE23Ad13e39Bb1",
    "contractAddress": "0xa1A02D1311a94eC7c3e9930eD99b5d0e3120279B",
    "transactionIndex": 8,
    "gasUsed": "1305267",
    "logsBloom": "0x
    "blockHash": "0x35cc46c07bba445e0755fe387002741bc207ec9f3fbb9f409880505b943ff1c8",
    "transactionHash": "0xad2fd8dc92405946afcbce20d731acef4ae87b52ec250c66194739024e07b3f0",
    "logs": [],
    "blockNumber": 11277053,
    "cumulativeGasUsed": "2539154",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6168499c0cFfCaCD319c818142124B7A15E857ab",
    "100000000000000000",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "20626",
    "500000",
    "30"
  ],
  "numDeployments": 10,
  "solcInputHash": "36e403eafec01ae90f5658176416de22",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gaseLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandomWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nerror Raffle__NotEnoughETHEntered();\\nerror Raffle__TransferFailded();\\nerror Raffle__RaffleNotOpen();\\nerror Raffle__UpkeepNotNeeded(uint256 currentBalance, uint256 numPlayers, uint256 raffleState);\\n\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    uint256 private immutable i_entranceFee;\\n    address payable[] private s_player;\\n\\n    event RaffleEnter(address indexed player);\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\n    event WinnerPicked(address winner);\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gaseLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint16 private constant REQUESTCONFIRMATIONS = 3;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant NUM_WORDS = 1;\\n    uint256 private immutable i_interval;\\n    uint256 private s_lastTimeStamp;\\n    address private s_recentWinner;\\n    enum RaffleState {\\n        OPEN,\\n        CALCULATING\\n    }\\n    RaffleState private s_raffleState;\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint256 entranceFee,\\n        bytes32 gaseLane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_entranceFee = entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gaseLane = gaseLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        s_raffleState = RaffleState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        i_interval = interval;\\n    }\\n\\n    function requestRandomWinner() external {\\n        s_raffleState = RaffleState.CALCULATING;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gaseLane,\\n            i_subscriptionId,\\n            REQUESTCONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit RequestedRaffleWinner(requestId);\\n    }\\n\\n    function enterRaffle() public payable {\\n        s_player.push(payable(msg.sender)); // using this addres contract get some ether that is why we use payable\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_player[index];\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256, /*requestId*/\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_player.length;\\n        address payable recentWinner = s_player[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n        s_player = new address payable[](0);\\n        s_raffleState = RaffleState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Raffle__TransferFailded();\\n        }\\n        s_player = new address payable[](0); //Zero indicate size of array\\n\\n        emit WinnerPicked(recentWinner);\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory /* performData */\\n        )\\n    {\\n        bool isOpen = RaffleState.OPEN == s_raffleState;\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n        bool hasPlayers = s_player.length > 0;\\n        bool hasBalance = address(this).balance > 0;\\n        upkeepNeeded = (timePassed && isOpen && hasBalance && hasPlayers);\\n        upkeepNeeded = true;\\n        //return (upkeepNeeded, \\\"0x0\\\"); // can we comment this out?\\n    }\\n\\n    function performUpkeep(\\n        bytes calldata /*performData*/\\n    ) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert Raffle__UpkeepNotNeeded(\\n                address(this).balance,\\n                s_player.length,\\n                uint256(s_raffleState)\\n            );\\n        }\\n        s_raffleState = RaffleState.CALCULATING;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gaseLane,\\n            i_subscriptionId,\\n            REQUESTCONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit RequestedRaffleWinner(requestId);\\n    }\\n\\n    function getRaffleState() public view returns (RaffleState) {\\n        return s_raffleState;\\n    }\\n\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_player.length;\\n    }\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getLastTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUESTCONFIRMATIONS;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n}\\n\",\"keccak256\":\"0xa5a3445744cfd45bf60047ad068cfa2c81ad97bcfdab36833d3de71a8ca87bf3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162001a0538038062001a058339818101604052810190620000389190620001ad565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff1660c01b815250508163ffffffff166101208163ffffffff1660e01b815250506000600260146101000a81548160ff02191690836001811115620001195762000118620002b5565b5b0217905550426001819055508061014081815250505050505050506200036b565b6000815190506200014b81620002e9565b92915050565b600081519050620001628162000303565b92915050565b60008151905062000179816200031d565b92915050565b600081519050620001908162000337565b92915050565b600081519050620001a78162000351565b92915050565b60008060008060008060c08789031215620001cd57620001cc620002e4565b5b6000620001dd89828a016200013a565b9650506020620001f089828a0162000168565b95505060406200020389828a0162000151565b94505060606200021689828a0162000196565b93505060806200022989828a016200017f565b92505060a06200023c89828a0162000168565b9150509295509295509295565b6000620002568262000267565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b620002f48162000249565b81146200030057600080fd5b50565b6200030e816200025d565b81146200031a57600080fd5b50565b620003288162000287565b81146200033457600080fd5b50565b620003428162000291565b81146200034e57600080fd5b50565b6200035c81620002a1565b81146200036857600080fd5b50565b60805160601c60a05160c05160601c60e0516101005160c01c6101205160e01c61014051611609620003fc600039600081816108ca015261093c01526000818161060701526107a80152600081816105e401526107850152600081816105c3015261076401526000818161058701526107280152600061032c01526000818161036901526103bd01526116096000f3fe6080604052600436106100dd5760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b41461026a578063c1c244e814610295578063e55ae4e8146102c0578063fd6673f5146102fd576100dd565b806353a2c19a146101d65780635f1b0fd8146102015780636e04ff0d1461022c576100dd565b80632cfcc539116100bb5780632cfcc539146101615780634585e33b1461016b578063473f1ddc14610194578063522a1f0b146101bf576100dd565b806309bc33a7146100e2578063115cbaf51461010d5780631fe543e314610138575b600080fd5b3480156100ee57600080fd5b506100f7610328565b60405161010491906111c7565b60405180910390f35b34801561011957600080fd5b50610122610350565b60405161012f91906111ac565b60405180910390f35b34801561014457600080fd5b5061015f600480360381019061015a9190610f67565b610367565b005b610169610427565b005b34801561017757600080fd5b50610192600480360381019061018d9190610e77565b6104cf565b005b3480156101a057600080fd5b506101a96106cf565b6040516101b691906110ca565b60405180910390f35b3480156101cb57600080fd5b506101d46106f9565b005b3480156101e257600080fd5b506101eb61086d565b6040516101f891906111c7565b60405180910390f35b34801561020d57600080fd5b5061021661087a565b60405161022391906111c7565b60405180910390f35b34801561023857600080fd5b50610253600480360381019061024e9190610ec4565b610887565b604051610261929190611129565b60405180910390f35b34801561027657600080fd5b5061027f610938565b60405161028c91906111c7565b60405180910390f35b3480156102a157600080fd5b506102aa610960565b6040516102b791906111c7565b60405180910390f35b3480156102cc57600080fd5b506102e760048036038101906102e29190610f0d565b61096a565b6040516102f491906110ca565b60405180910390f35b34801561030957600080fd5b506103126109b1565b60405161031f91906111c7565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461041957337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610410929190611100565b60405180910390fd5b61042382826109bd565b5050565b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60006104e960405180602001604052806000815250610887565b509050806105585747600080549050600260149054906101000a900460ff16600181111561051a576105196114e9565b5b6040517f584327aa00000000000000000000000000000000000000000000000000000000815260040161054f939291906111e2565b60405180910390fd5b6001600260146101000a81548160ff0219169083600181111561057e5761057d6114e9565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610648959493929190611159565b602060405180830381600087803b15801561066257600080fd5b505af1158015610676573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069a9190610f3a565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6001600260146101000a81548160ff0219169083600181111561071f5761071e6114e9565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016107e9959493929190611159565b602060405180830381600087803b15801561080357600080fd5b505af1158015610817573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083b9190610f3a565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250565b6000600161ffff16905090565b6000600361ffff16905090565b600060606000600260149054906101000a900460ff1660018111156108af576108ae6114e9565b5b600060018111156108c3576108c26114e9565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600154426108f791906112c2565b119050600080600080549050119050600080471190508280156109175750835b80156109205750805b80156109295750815b95506001955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600154905090565b600080828154811061097f5761097e611518565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106109d8576109d7611518565b5b60200260200101516109ea919061145a565b90506000808281548110610a0157610a00611518565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610a8a57610a89611547565b5b604051908082528060200260200182016040528015610ab85781602001602082028036833780820191505090505b5060009080519060200190610ace929190610c42565b506000600260146101000a81548160ff02191690836001811115610af557610af46114e9565b5b02179055504260018190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610b27906110b5565b60006040518083038185875af1925050503d8060008114610b64576040519150601f19603f3d011682016040523d82523d6000602084013e610b69565b606091505b5050905080610ba4576040517f7e9ce22200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600067ffffffffffffffff811115610bbf57610bbe611547565b5b604051908082528060200260200182016040528015610bed5781602001602082028036833780820191505090505b5060009080519060200190610c03929190610c42565b507f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df82604051610c3391906110e5565b60405180910390a15050505050565b828054828255906000526020600020908101928215610cbb579160200282015b82811115610cba5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c62565b5b509050610cc89190610ccc565b5090565b5b80821115610ce5576000816000905550600101610ccd565b5090565b6000610cfc610cf78461123e565b611219565b90508083825260208201905082856020860282011115610d1f57610d1e611580565b5b60005b85811015610d4f5781610d358882610e4d565b845260208401935060208301925050600181019050610d22565b5050509392505050565b6000610d6c610d678461126a565b611219565b905082815260208101848484011115610d8857610d87611585565b5b610d938482856113e7565b509392505050565b600082601f830112610db057610daf61157b565b5b8135610dc0848260208601610ce9565b91505092915050565b60008083601f840112610ddf57610dde61157b565b5b8235905067ffffffffffffffff811115610dfc57610dfb611576565b5b602083019150836001820283011115610e1857610e17611580565b5b9250929050565b600082601f830112610e3457610e3361157b565b5b8135610e44848260208601610d59565b91505092915050565b600081359050610e5c816115bc565b92915050565b600081519050610e71816115bc565b92915050565b60008060208385031215610e8e57610e8d61158f565b5b600083013567ffffffffffffffff811115610eac57610eab61158a565b5b610eb885828601610dc9565b92509250509250929050565b600060208284031215610eda57610ed961158f565b5b600082013567ffffffffffffffff811115610ef857610ef761158a565b5b610f0484828501610e1f565b91505092915050565b600060208284031215610f2357610f2261158f565b5b6000610f3184828501610e4d565b91505092915050565b600060208284031215610f5057610f4f61158f565b5b6000610f5e84828501610e62565b91505092915050565b60008060408385031215610f7e57610f7d61158f565b5b6000610f8c85828601610e4d565b925050602083013567ffffffffffffffff811115610fad57610fac61158a565b5b610fb985828601610d9b565b9150509250929050565b610fcc8161138d565b82525050565b610fdb816112f6565b82525050565b610fea81611308565b82525050565b610ff981611314565b82525050565b600061100a8261129b565b61101481856112a6565b93506110248185602086016113f6565b61102d81611594565b840191505092915050565b6110418161139f565b82525050565b60006110546000836112b7565b915061105f826115a5565b600082019050919050565b61107381611331565b82525050565b611082816113d5565b82525050565b6110918161135f565b82525050565b6110a081611369565b82525050565b6110af81611379565b82525050565b60006110c082611047565b9150819050919050565b60006020820190506110df6000830184610fd2565b92915050565b60006020820190506110fa6000830184610fc3565b92915050565b60006040820190506111156000830185610fd2565b6111226020830184610fd2565b9392505050565b600060408201905061113e6000830185610fe1565b81810360208301526111508184610fff565b90509392505050565b600060a08201905061116e6000830188610ff0565b61117b60208301876110a6565b611188604083018661106a565b6111956060830185611097565b6111a26080830184611079565b9695505050505050565b60006020820190506111c16000830184611038565b92915050565b60006020820190506111dc6000830184611088565b92915050565b60006060820190506111f76000830186611088565b6112046020830185611088565b6112116040830184611088565b949350505050565b6000611223611234565b905061122f8282611429565b919050565b6000604051905090565b600067ffffffffffffffff82111561125957611258611547565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561128557611284611547565b5b61128e82611594565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006112cd8261135f565b91506112d88361135f565b9250828210156112eb576112ea61148b565b5b828203905092915050565b60006113018261133f565b9050919050565b60008115159050919050565b6000819050919050565b600081905061132c826115a8565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6000611398826113b1565b9050919050565b60006113aa8261131e565b9050919050565b60006113bc826113c3565b9050919050565b60006113ce8261133f565b9050919050565b60006113e082611331565b9050919050565b82818337600083830152505050565b60005b838110156114145780820151818401526020810190506113f9565b83811115611423576000848401525b50505050565b61143282611594565b810181811067ffffffffffffffff8211171561145157611450611547565b5b80604052505050565b60006114658261135f565b91506114708361135f565b9250826114805761147f6114ba565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b600281106115b9576115b86114e9565b5b50565b6115c58161135f565b81146115d057600080fd5b5056fea26469706673582212206d84858b10245393a2d11cc29a9121ae668ee57a3d462b1264331da725eb539a64736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b41461026a578063c1c244e814610295578063e55ae4e8146102c0578063fd6673f5146102fd576100dd565b806353a2c19a146101d65780635f1b0fd8146102015780636e04ff0d1461022c576100dd565b80632cfcc539116100bb5780632cfcc539146101615780634585e33b1461016b578063473f1ddc14610194578063522a1f0b146101bf576100dd565b806309bc33a7146100e2578063115cbaf51461010d5780631fe543e314610138575b600080fd5b3480156100ee57600080fd5b506100f7610328565b60405161010491906111c7565b60405180910390f35b34801561011957600080fd5b50610122610350565b60405161012f91906111ac565b60405180910390f35b34801561014457600080fd5b5061015f600480360381019061015a9190610f67565b610367565b005b610169610427565b005b34801561017757600080fd5b50610192600480360381019061018d9190610e77565b6104cf565b005b3480156101a057600080fd5b506101a96106cf565b6040516101b691906110ca565b60405180910390f35b3480156101cb57600080fd5b506101d46106f9565b005b3480156101e257600080fd5b506101eb61086d565b6040516101f891906111c7565b60405180910390f35b34801561020d57600080fd5b5061021661087a565b60405161022391906111c7565b60405180910390f35b34801561023857600080fd5b50610253600480360381019061024e9190610ec4565b610887565b604051610261929190611129565b60405180910390f35b34801561027657600080fd5b5061027f610938565b60405161028c91906111c7565b60405180910390f35b3480156102a157600080fd5b506102aa610960565b6040516102b791906111c7565b60405180910390f35b3480156102cc57600080fd5b506102e760048036038101906102e29190610f0d565b61096a565b6040516102f491906110ca565b60405180910390f35b34801561030957600080fd5b506103126109b1565b60405161031f91906111c7565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461041957337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610410929190611100565b60405180910390fd5b61042382826109bd565b5050565b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60006104e960405180602001604052806000815250610887565b509050806105585747600080549050600260149054906101000a900460ff16600181111561051a576105196114e9565b5b6040517f584327aa00000000000000000000000000000000000000000000000000000000815260040161054f939291906111e2565b60405180910390fd5b6001600260146101000a81548160ff0219169083600181111561057e5761057d6114e9565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610648959493929190611159565b602060405180830381600087803b15801561066257600080fd5b505af1158015610676573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069a9190610f3a565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6001600260146101000a81548160ff0219169083600181111561071f5761071e6114e9565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016107e9959493929190611159565b602060405180830381600087803b15801561080357600080fd5b505af1158015610817573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083b9190610f3a565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250565b6000600161ffff16905090565b6000600361ffff16905090565b600060606000600260149054906101000a900460ff1660018111156108af576108ae6114e9565b5b600060018111156108c3576108c26114e9565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600154426108f791906112c2565b119050600080600080549050119050600080471190508280156109175750835b80156109205750805b80156109295750815b95506001955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600154905090565b600080828154811061097f5761097e611518565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106109d8576109d7611518565b5b60200260200101516109ea919061145a565b90506000808281548110610a0157610a00611518565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610a8a57610a89611547565b5b604051908082528060200260200182016040528015610ab85781602001602082028036833780820191505090505b5060009080519060200190610ace929190610c42565b506000600260146101000a81548160ff02191690836001811115610af557610af46114e9565b5b02179055504260018190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610b27906110b5565b60006040518083038185875af1925050503d8060008114610b64576040519150601f19603f3d011682016040523d82523d6000602084013e610b69565b606091505b5050905080610ba4576040517f7e9ce22200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600067ffffffffffffffff811115610bbf57610bbe611547565b5b604051908082528060200260200182016040528015610bed5781602001602082028036833780820191505090505b5060009080519060200190610c03929190610c42565b507f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df82604051610c3391906110e5565b60405180910390a15050505050565b828054828255906000526020600020908101928215610cbb579160200282015b82811115610cba5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c62565b5b509050610cc89190610ccc565b5090565b5b80821115610ce5576000816000905550600101610ccd565b5090565b6000610cfc610cf78461123e565b611219565b90508083825260208201905082856020860282011115610d1f57610d1e611580565b5b60005b85811015610d4f5781610d358882610e4d565b845260208401935060208301925050600181019050610d22565b5050509392505050565b6000610d6c610d678461126a565b611219565b905082815260208101848484011115610d8857610d87611585565b5b610d938482856113e7565b509392505050565b600082601f830112610db057610daf61157b565b5b8135610dc0848260208601610ce9565b91505092915050565b60008083601f840112610ddf57610dde61157b565b5b8235905067ffffffffffffffff811115610dfc57610dfb611576565b5b602083019150836001820283011115610e1857610e17611580565b5b9250929050565b600082601f830112610e3457610e3361157b565b5b8135610e44848260208601610d59565b91505092915050565b600081359050610e5c816115bc565b92915050565b600081519050610e71816115bc565b92915050565b60008060208385031215610e8e57610e8d61158f565b5b600083013567ffffffffffffffff811115610eac57610eab61158a565b5b610eb885828601610dc9565b92509250509250929050565b600060208284031215610eda57610ed961158f565b5b600082013567ffffffffffffffff811115610ef857610ef761158a565b5b610f0484828501610e1f565b91505092915050565b600060208284031215610f2357610f2261158f565b5b6000610f3184828501610e4d565b91505092915050565b600060208284031215610f5057610f4f61158f565b5b6000610f5e84828501610e62565b91505092915050565b60008060408385031215610f7e57610f7d61158f565b5b6000610f8c85828601610e4d565b925050602083013567ffffffffffffffff811115610fad57610fac61158a565b5b610fb985828601610d9b565b9150509250929050565b610fcc8161138d565b82525050565b610fdb816112f6565b82525050565b610fea81611308565b82525050565b610ff981611314565b82525050565b600061100a8261129b565b61101481856112a6565b93506110248185602086016113f6565b61102d81611594565b840191505092915050565b6110418161139f565b82525050565b60006110546000836112b7565b915061105f826115a5565b600082019050919050565b61107381611331565b82525050565b611082816113d5565b82525050565b6110918161135f565b82525050565b6110a081611369565b82525050565b6110af81611379565b82525050565b60006110c082611047565b9150819050919050565b60006020820190506110df6000830184610fd2565b92915050565b60006020820190506110fa6000830184610fc3565b92915050565b60006040820190506111156000830185610fd2565b6111226020830184610fd2565b9392505050565b600060408201905061113e6000830185610fe1565b81810360208301526111508184610fff565b90509392505050565b600060a08201905061116e6000830188610ff0565b61117b60208301876110a6565b611188604083018661106a565b6111956060830185611097565b6111a26080830184611079565b9695505050505050565b60006020820190506111c16000830184611038565b92915050565b60006020820190506111dc6000830184611088565b92915050565b60006060820190506111f76000830186611088565b6112046020830185611088565b6112116040830184611088565b949350505050565b6000611223611234565b905061122f8282611429565b919050565b6000604051905090565b600067ffffffffffffffff82111561125957611258611547565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561128557611284611547565b5b61128e82611594565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006112cd8261135f565b91506112d88361135f565b9250828210156112eb576112ea61148b565b5b828203905092915050565b60006113018261133f565b9050919050565b60008115159050919050565b6000819050919050565b600081905061132c826115a8565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6000611398826113b1565b9050919050565b60006113aa8261131e565b9050919050565b60006113bc826113c3565b9050919050565b60006113ce8261133f565b9050919050565b60006113e082611331565b9050919050565b82818337600083830152505050565b60005b838110156114145780820151818401526020810190506113f9565b83811115611423576000848401525b50505050565b61143282611594565b810181811067ffffffffffffffff8211171561145157611450611547565b5b80604052505050565b60006114658261135f565b91506114708361135f565b9250826114805761147f6114ba565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b600281106115b9576115b86114e9565b5b50565b6115c58161135f565b81146115d057600080fd5b5056fea26469706673582212206d84858b10245393a2d11cc29a9121ae668ee57a3d462b1264331da725eb539a64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 193,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_player",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 224,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 226,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 232,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "2",
        "type": "t_enum(RaffleState)229"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)229": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}